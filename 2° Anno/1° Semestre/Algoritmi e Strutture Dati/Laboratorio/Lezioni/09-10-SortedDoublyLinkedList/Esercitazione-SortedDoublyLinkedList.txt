       
   /************************************************************************************
    * 						Esercizio
    * Scrivere il metodo 
    * public boolean equals (SortedDoublyLinkedList<E> obj)
    * interno alla classe SinglyLinkeList<E> per confrontare questa lista con un
    * altro oggetto di tipo SortedDoublyLinkedList<E>: 
    * due liste sono uguali se contengono oggetti uguali nel medesimo ordine.
    * 
    * 						Exercise
    * Write the method 
    * public boolean equals (SortedDoublyLinkedList<E> obj)
    * inside the SinglyLinkeList<E> class to compare this list with another object
    * of type SinglyLinkeList<E>: two lists are equal if they contain equal objects
    * in the same order.
    * 
    ************************************************************************************/

   public boolean equals (SortedDoublyLinkedList<E> obj) {
	   if (obj == null) return false;
	   if (this.size != obj.size) return false;
	   Iterator<E> itr1 =  this.iterator();
	   Iterator<E> itr2 = obj.iterator();
	   while (itr1.hasNext())
		   if ( !itr1.next().equals(itr2.next()) ) return false;
	   return true;
   }
    
     
    /************************************************************************************
     *   					Esercizio
     * Scrivere il metodo 
     * public  SortedDoublyLinkedList<E> copy()
     * interno alla classe SinglyLinkeList<E> che restituisce una copia della lista.
     * 
     * 						Exercise
     * Write the method 
     * public  SortedDoublyLinkedList<E> copy()
     * which returns a copy of the list. Complexity: O(n)
     * 
     ************************************************************************************/
  
    public  SortedDoublyLinkedList<E> copy()
   {
	   SortedDoublyLinkedList<E> twin = new SortedDoublyLinkedList<E>();
	   if (size == 0) return twin;
       Iterator<E> itr = this.iterator();
       // add first node
       twin.tail = twin.head = new Node<E>(itr.next(), null, null);
       twin.size++;
       while (itr.hasNext()) {
    	   // addLast
           twin.tail.next = new Node<E>(itr.next(), null, twin.tail);
           twin.tail = twin.tail.next;
           twin.size++;
       }
       return twin;
   }
   
   
   //  version 2 append-based
   public  SortedDoublyLinkedList<E> copy2()
   {
	   SortedDoublyLinkedList<E> twin = new SortedDoublyLinkedList<E>();
	   for (E item: this) twin.append(item);
       return twin;
   }
   
   
   
   /************************************************************************************
    *   			Esercizio (estratto dal I Parziale del 2020)
    * Implementare il metodo 
    * public boolean addAll(Collection<? extends E> coll), 
    * interno alla classe SortedDoublyLinkedList, che inserisce nella lista corrente
    * (this) tutti gli elementi nella collezione specificata in modo da non violare
    * l'ordinamento.
    * 
    * 				Exercise (extracted from the I partial exam of 2020)
    * Implement the 
    * public boolean addAll(Collection<? extends E> coll) 
    * method, internal to the SortedDoublyLinkedList class, which inserts all
    * the elements in the specified collection into the current list (this) so
    * as not to violate the sorting.
    * 
    ************************************************************************************/
   

   
     public boolean addAll(Collection<? extends E> coll) {
  	   if (coll == null || coll.isEmpty()) return false;
  	   for (E item: coll) add(item);
  	   return true;
     }